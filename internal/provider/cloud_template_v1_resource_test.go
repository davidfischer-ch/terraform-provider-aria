// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccCloudTemplateV1Resource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

locals {
  windows_flavor_mappings = {
    "Windows-S" = {
      cpu_count = 2
      memory    = 8192
    }
    "Windows-M" = {
      cpu_count = 4
      memory    = 16384
    }
    "Windows-L" = {
      cpu_count = 8
      memory    = 32768
    }
  }

  cloud_config = <<-EOT
    #cloud-config
    write_files:
      - content: This is a good test....
        path: C:\SM\config_done.txt
      - content: |
          $disks = Get-Disk | Where-Object PartitionStyle -Eq "RAW";
          ForEach ($disk in $disks) {$disk | Initialize-Disk -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume}
        path: C:\SM\disk.ps1
      - content: |
          Set-Location "C:\Program Files\VMware\VMware Tools\";
          .\rpctool.exe "info-set guestinfo.userdata  "
        path: C:\SM\guestinfo.ps1
    set_timezone: Europe/Zurich
    ntp:
      enabled: true
      servers: ['ntp.domain.net,0x8 ntp.domain.net,0x8']
    runcmd:
      - 'PowerShell -NoProfile -ExecutionPolicy Bypass -Command "& {Start-Process PowerShell -ArgumentList (Set-ExecutionPolicy Unrestricted -Force) -Verb RunAs}"'
      - 'PowerShell Set-LocalUser Administrator -PasswordNeverExpires $true'
      - 'PowerShell C:\\SM\\disk.ps1'
      - 'PowerShell set-service -name cloudbase-init -StartupType Disabled'
      - 'PowerShell setx BUILD_CB OK /M'
      - 'PowerShell C:\\SM\\guestinfo.ps1'
      - 'PowerShell start-sleep 2'
      - 'PowerShell Restart-Computer -Force'
  EOT
}

resource "aria_cloud_template_v1" "test" {
  name              = "ARIA_PROVIDER_TEST_CLOUD_TEMPLATE"
  description       = "Temporary cloud template generated by Aria provider's acceptance tests."
  project_id        = var.test_project_id
  request_scope_org = true

  inputs = {

    disks = {
      name               = "disks"
      description        = "Disks"
      title              = "Disks"
      type               = "array"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      items = {
        title = "Disque"
        type  = "object"
        properties = {
          size = {
            type  = "integer"
            title = "Disk size in GB"
          }
          lunId = {
            type = "integer"
          }
        }
      }
    }

    flavor = {
      name               = "flavor"
      description        = "Flavor"
      title              = "Flavor"
      type               = "string"
      default            = jsonencode("Windows-S")
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      oneOf = [
        for name, specs in local.windows_flavor_mappings :
        {
          title     = "${name} (${specs.cpu_count} vCPU, ${specs.memory / 1024} Go RAM)"
          const     = name
          encrypted = false
        }
      ]
    }

    /* vm_common = var.vm_common_property_group.as_property */

    install_iis = {
      name               = "install_iis"
      description        = "Install IIS?"
      title              = "IIS"
      type               = "boolean"
      default            = false
      encrypted          = false
      read_only          = false
      recreate_on_update = false
    }

  }

  resources = {
    Network_1 = {
      name = "Network_1"
      type = "Cloud.vSphere.Network"
      metadata = {
        layoutPosition = [1, 0]
      }
      properties = {
        networkType = "existing"
        constraints = [
          { tag = "subnet_id:1234" }
        ]
      }
    }
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_cloud_template_v1.test", "id"),
					resource.TestCheckResourceAttr("aria_cloud_template_v1.test", "name", "ARIA_PROVIDER_TEST_CLOUD_TEMPLATE"),
					resource.TestCheckResourceAttr("aria_cloud_template_v1.test", "description", "Temporary cloud template generated by Aria provider's acceptance tests."),
					resource.TestCheckResourceAttr("aria_cloud_template_v1.test", "request_scope_org", "true"),
					resource.TestCheckResourceAttrSet("aria_cloud_template_v1.test", "org_id"),
					resource.TestCheckResourceAttr("aria_cloud_template_v1.test", "valid", "false"),
					resource.TestCheckResourceAttr("aria_cloud_template_v1.test", "validation_messages.0.resource_name", "Network_1"),
					resource.TestCheckResourceAttr("aria_cloud_template_v1.test", "validation_messages.0.path", "$.resources.Network_1"),

					// This is not yet implemented for real...
					resource.TestCheckResourceAttr("aria_cloud_template_v1.test", "validation_messages.0.message", "Resource properties is mandatory"),
				),
			},
			// ImportState testing
			/* TODO https://github.com/davidfischer-ch/terraform-provider-aria/issues/33*/
			{
				ResourceName:      "aria_cloud_template_v1.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Delete testing automatically occurs in TestCase
			// TODO Check https://developer.hashicorp.com/terraform/plugin/sdkv2/testing/acceptance-tests/testcase#checkdestroy
		},
	})
}
