// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceActionResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{

			// Create and Read testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_abx_action" "machine_test" {
  name            = "ARIA_PROVIDER_MACHINE_TEST"
  description     = "Temporary action generated by Aria provider's acceptance tests."
  runtime_name    = "python"
  memory_in_mb    = 128
  timeout_seconds = 60
  entrypoint      = "handler"
  dependencies    = []
  constants       = []
  secrets         = []
  source          = <<EOT
import os


def handler(*args, **kwargs):
    print('Global symbols :', globals())
    print('Environment variables :', os.environ)
    print('Call Arguments: ', args, kwargs)
EOT
  shared     = true
  project_id = var.test_project_id
}

resource "aria_resource_action" "test" {
  name          = aria_abx_action.machine_test.name
  display_name  = "Reset"
  description   = "Reset the machine."
  resource_type = "Cloud.vSphere.Machine"
  status        = "DRAFT"
  project_id    = var.test_project_id
  runnable_item = {
    id                = aria_abx_action.machine_test.id
    name              = aria_abx_action.machine_test.name
    project_id        = aria_abx_action.machine_test.project_id
    type              = "abx.action"
    input_parameters  = []
    output_parameters = []
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "ARIA_PROVIDER_MACHINE_TEST"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "display_name", "Reset"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "description", "Reset the machine."),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Cloud.vSphere.Machine"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "DRAFT"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "project_id"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Form definition generated by the platform
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.name", "ARIA_PROVIDER_MACHINE_TEST"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.form"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", ""),
					resource.TestCheckResourceAttrPair("aria_resource_action.test", "form_definition.source_id", "aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.source_type", "resource.action"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// Update (miscellaneous) testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_abx_action" "machine_test" {
  name            = "ARIA_PROVIDER_MACHINE_TEST"
  description     = "Temporary action generated by Aria provider's acceptance tests."
  runtime_name    = "python"
  memory_in_mb    = 128
  timeout_seconds = 60
  entrypoint      = "handler"
  dependencies    = []
  constants       = []
  secrets         = []
  source          = <<EOT
import os


def handler(*args, **kwargs):
    print('Global symbols :', globals())
    print('Environment variables :', os.environ)
    print('Call Arguments :', args, kwargs)
EOT
  shared     = true
  project_id = var.test_project_id
}

resource "aria_resource_action" "test" {
  name          = "${aria_abx_action.machine_test.name}_RENAMED"
  display_name  = "RESET"
  description   = "Reset the machine..."
  resource_type = "Cloud.vSphere.Machine"
  status        = "RELEASED"
  project_id    = var.test_project_id
  runnable_item = {
    id                = aria_abx_action.machine_test.id
    name              = aria_abx_action.machine_test.name
    project_id        = aria_abx_action.machine_test.project_id
    type              = "abx.action"
    input_parameters  = []
    output_parameters = []
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "display_name", "RESET"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "description", "Reset the machine..."),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Cloud.vSphere.Machine"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "RELEASED"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "project_id"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Form definition generated by the platform
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.form"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", ""),
					resource.TestCheckResourceAttrPair("aria_resource_action.test", "form_definition.source_id", "aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.source_type", "resource.action"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// Update (display name) testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_abx_action" "machine_test" {
  name            = "ARIA_PROVIDER_MACHINE_TEST"
  description     = "Temporary action generated by Aria provider's acceptance tests."
  runtime_name    = "python"
  memory_in_mb    = 128
  timeout_seconds = 60
  entrypoint      = "handler"
  dependencies    = []
  constants       = []
  secrets         = []
  source          = <<EOT
import os


def handler(*args, **kwargs):
    print('Global symbols :', globals())
    print('Environment variables :', os.environ)
    print('Call Arguments :', args, kwargs)
EOT
  shared     = true
  project_id = var.test_project_id
}

resource "aria_resource_action" "test" {
  name          = "${aria_abx_action.machine_test.name}_RENAMED"
  display_name  = "RESET_BIS"
  description   = "Reset the machine..."
  resource_type = "Cloud.vSphere.Machine"
  status        = "RELEASED"
  project_id    = var.test_project_id
  runnable_item = {
    id                = aria_abx_action.machine_test.id
    name              = aria_abx_action.machine_test.name
    project_id        = aria_abx_action.machine_test.project_id
    type              = "abx.action"
    input_parameters  = []
    output_parameters = []
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "display_name", "RESET_BIS"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "description", "Reset the machine..."),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Cloud.vSphere.Machine"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "RELEASED"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "project_id"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Form definition generated by the platform
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.form"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", ""),
					resource.TestCheckResourceAttrPair("aria_resource_action.test", "form_definition.source_id", "aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.source_type", "resource.action"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// Unscoping testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_abx_action" "machine_test" {
  name            = "ARIA_PROVIDER_MACHINE_TEST"
  description     = "Temporary action generated by Aria provider's acceptance tests."
  runtime_name    = "python"
  memory_in_mb    = 128
  timeout_seconds = 60
  entrypoint      = "handler"
  dependencies    = []
  constants       = []
  secrets         = []
  source          = <<EOT
import os


def handler(*args, **kwargs):
    print('Global symbols :', globals())
    print('Environment variables :', os.environ)
    print('Call Arguments :', args, kwargs)
EOT
  shared     = true
  project_id = var.test_project_id
}

resource "aria_resource_action" "test" {
  name          = "${aria_abx_action.machine_test.name}_RENAMED"
  display_name  = "RESET"
  description   = "Reset the machine..."
  resource_type = "Cloud.vSphere.Machine"
  status        = "DRAFT"
  project_id    = ""
  runnable_item = {
    id                = aria_abx_action.machine_test.id
    name              = aria_abx_action.machine_test.name
    project_id        = aria_abx_action.machine_test.project_id
    type              = "abx.action"
    input_parameters  = []
    output_parameters = []
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "display_name", "RESET"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "description", "Reset the machine..."),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Cloud.vSphere.Machine"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "DRAFT"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Form definition generated by the platform
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.form"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", ""),
					resource.TestCheckResourceAttrPair("aria_resource_action.test", "form_definition.source_id", "aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.source_type", "resource.action"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// Add criteria testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_abx_action" "machine_test" {
  name            = "ARIA_PROVIDER_MACHINE_TEST"
  description     = "Temporary action generated by Aria provider's acceptance tests."
  runtime_name    = "python"
  memory_in_mb    = 128
  timeout_seconds = 60
  entrypoint      = "handler"
  dependencies    = []
  constants       = []
  secrets         = []
  source          = <<EOT
import os


def handler(*args, **kwargs):
    print('Global symbols :', globals())
    print('Environment variables :', os.environ)
    print('Call Arguments :', args, kwargs)
EOT
  shared     = true
  project_id = var.test_project_id
}

resource "aria_resource_action" "test" {
  name          = "${aria_abx_action.machine_test.name}_RENAMED"
  display_name  = "RESET"
  description   = "Reset the machine..."
  resource_type = "Cloud.vSphere.Machine"
  status        = "DRAFT"
  project_id    = ""
  runnable_item = {
    id                = aria_abx_action.machine_test.id
    name              = aria_abx_action.machine_test.name
    project_id        = aria_abx_action.machine_test.project_id
    type              = "abx.action"
    input_parameters  = []
    output_parameters = []
  }

  criteria = jsonencode({
    matchExpression = [
      {
        and = [
          {
            key      = "$${properties.osType}"
            operator = "eq"
            value    = "WINDOWS"
          }
        ]
      }
    ]
  })
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "display_name", "RESET"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "description", "Reset the machine..."),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Cloud.vSphere.Machine"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "DRAFT"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Form definition generated by the platform
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.form"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", ""),
					resource.TestCheckResourceAttrPair("aria_resource_action.test", "form_definition.source_id", "aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.source_type", "resource.action"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// Update criteria testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_abx_action" "machine_test" {
  name            = "ARIA_PROVIDER_MACHINE_TEST"
  description     = "Temporary action generated by Aria provider's acceptance tests."
  runtime_name    = "python"
  memory_in_mb    = 128
  timeout_seconds = 60
  entrypoint      = "handler"
  dependencies    = []
  constants       = []
  secrets         = []
  source          = <<EOT
import os


def handler(*args, **kwargs):
    print('Global symbols :', globals())
    print('Environment variables :', os.environ)
    print('Call Arguments :', args, kwargs)
EOT
  shared     = true
  project_id = var.test_project_id
}

resource "aria_resource_action" "test" {
  name          = "${aria_abx_action.machine_test.name}_RENAMED"
  display_name  = "RESET"
  description   = "Reset the machine..."
  resource_type = "Cloud.vSphere.Machine"
  status        = "DRAFT"
  project_id    = ""
  runnable_item = {
    id                = aria_abx_action.machine_test.id
    name              = aria_abx_action.machine_test.name
    project_id        = aria_abx_action.machine_test.project_id
    type              = "abx.action"
    input_parameters  = []
    output_parameters = []
  }

  criteria = jsonencode({
    matchExpression = [
      {
        and = [
          {
            key      = "$${properties.osType}"
            operator = "eq"
            value    = "WINDOWS"
          },
          {
            key      = "$${properties.totalMemoryMB}"
            operator = "greaterThan"
            value    = "1024"
          },
          {
            key      = "$${properties.tags}"
            operator = "hasAny"
            value = {
              matchExpression = [
                {
                  and = [
                    {
                      key      = "key"
                      operator = "eq"
                      value    = "env"
                    },
                    {
                      key      = "value"
                      operator = "eq"
                      value    = "REC"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    ]
  })
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "display_name", "RESET"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "description", "Reset the machine..."),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Cloud.vSphere.Machine"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "DRAFT"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Form definition generated by the platform
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.form"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", ""),
					resource.TestCheckResourceAttrPair("aria_resource_action.test", "form_definition.source_id", "aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.source_type", "resource.action"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// Add form & style testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_abx_action" "machine_test" {
  name            = "ARIA_PROVIDER_MACHINE_TEST"
  description     = "Temporary action generated by Aria provider's acceptance tests."
  runtime_name    = "python"
  memory_in_mb    = 128
  timeout_seconds = 60
  entrypoint      = "handler"
  dependencies    = []
  constants       = []
  secrets         = []
  source          = <<EOT
import os


def handler(*args, **kwargs):
    print('Global symbols :', globals())
    print('Environment variables :', os.environ)
    print('Call Arguments :', args, kwargs)
EOT
  shared     = true
  project_id = var.test_project_id
}

resource "aria_resource_action" "test" {
  name          = "${aria_abx_action.machine_test.name}_RENAMED"
  display_name  = "RESET"
  description   = "Reset the machine..."
  resource_type = "Cloud.vSphere.Machine"
  status        = "DRAFT"
  project_id    = ""
  runnable_item = {
    id                = aria_abx_action.machine_test.id
    name              = aria_abx_action.machine_test.name
    project_id        = aria_abx_action.machine_test.project_id
    type              = "abx.action"
    input_parameters  = []
    output_parameters = []
  }

  criteria = jsonencode({
    matchExpression = [
      {
        and = [
          {
            key      = "$${properties.osType}"
            operator = "eq"
            value    = "WINDOWS"
          }
        ]
      }
    ]
  })

  form_definition = {
    styles = <<EOT
section {
  --main-bg-color: brown;
}
EOT
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "display_name", "RESET"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "description", "Reset the machine..."),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Cloud.vSphere.Machine"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "DRAFT"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Managed form definition
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					//resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form", "{\"layout\":{\"pages\":[{\"id\":\"page_1\",\"title\":\"Page 1\",\"sections\":[]}]},\"schema\":{}}"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", "section {\n  --main-bg-color: brown;\n}\n"),
					resource.TestCheckResourceAttrPair("aria_resource_action.test", "form_definition.source_id", "aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.source_type", "resource.action"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// Update form & style testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_abx_action" "machine_test" {
  name            = "ARIA_PROVIDER_MACHINE_TEST"
  description     = "Temporary action generated by Aria provider's acceptance tests."
  runtime_name    = "python"
  memory_in_mb    = 128
  timeout_seconds = 60
  entrypoint      = "handler"
  dependencies    = []
  constants       = []
  secrets         = []
  source          = <<EOT
import os


def handler(*args, **kwargs):
    print('Global symbols :', globals())
    print('Environment variables :', os.environ)
    print('Call Arguments :', args, kwargs)
EOT
  shared     = true
  project_id = var.test_project_id
}

resource "aria_resource_action" "test" {
  name          = "${aria_abx_action.machine_test.name}_RENAMED"
  display_name  = "RESET"
  description   = "Reset the machine..."
  resource_type = "Cloud.vSphere.Machine"
  status        = "DRAFT"
  project_id    = ""
  runnable_item = {
    id                = aria_abx_action.machine_test.id
    name              = aria_abx_action.machine_test.name
    project_id        = aria_abx_action.machine_test.project_id
    type              = "abx.action"
    input_parameters  = []
    output_parameters = []
  }

  criteria = jsonencode({
    matchExpression = [
      {
        and = [
          {
            key      = "$${properties.osType}"
            operator = "eq"
            value    = "WINDOWS"
          }
        ]
      }
    ]
  })

  form_definition = {

    form = jsonencode({
      layout = {
        pages = [
          {
            id       = "page_1"
            sections = []
            title    = "Première Page"
          }
        ]
      },
      schema = {}
    })

    styles = <<EOT
section {
  --main-bg-color: brown;
}
EOT
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "display_name", "RESET"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "description", "Reset the machine..."),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Cloud.vSphere.Machine"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "DRAFT"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Managed form definition
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.name", "ARIA_PROVIDER_MACHINE_TEST_RENAMED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					//resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form", "{}"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", "section {\n  --main-bg-color: brown;\n}\n"),
					resource.TestCheckResourceAttrPair("aria_resource_action.test", "form_definition.source_id", "aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.source_type", "resource.action"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// ImportState testing
			/* TODO https://github.com/davidfischer-ch/terraform-provider-aria/issues/32
			   {
			     ResourceName:      "aria_resource_action.test",
			     ImportState:       true,
			     ImportStateVerify: true,
			   }, */
			// Delete testing automatically occurs in TestCase
			// TODO Check https://developer.hashicorp.com/terraform/plugin/sdkv2/testing/acceptance-tests/testcase#checkdestroy
		},
	})
}
