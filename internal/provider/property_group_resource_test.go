// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccPropertyGroupResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: `
resource "aria_property_group" "test" {
  name        = "ARIA_PROVIDER_TEST_PROPERTY_GROUP"
  description = "Temporary property group generated by Aria provider's acceptance tests."
  type        = "INPUT"

  properties = {
    some_text = {
      name               = "some_text"
      title              = "Some Text"
      description        = "Some text, more text."
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      one_of      = [
        { const = "a", title = "A", encrypted = false },
        { const = "b", title = "B", encrypted = false }
      ]
    }
    number = {
      name        = "number"
      title       = "Some Number"
      description = <<EOT
Some number.
It can be an integer or a float.
EOT
      type               = "number"
      default            = "3.141592"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      minimum            = 0
      maximum            = 5
    }
    super_secret = {
      name               = "super_secret"
      title              = "Super Secret"
      description        = ""
      type               = "string"
      encrypted          = true
      read_only          = false
      recreate_on_update = false
      min_length         = 16
      max_length         = 64

      # TODO https://github.com/davidfischer-ch/terraform-provider-aria/issues/35
      # encrypted   = true
    }
    other = {
      name               = "other"
      title              = "Other"
      description        = ""
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
    }
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_property_group.test", "id"),
					resource.TestCheckResourceAttr("aria_property_group.test", "name", "ARIA_PROVIDER_TEST_PROPERTY_GROUP"),
					resource.TestCheckResourceAttr("aria_property_group.test", "type", "INPUT"),
					resource.TestCheckResourceAttr("aria_property_group.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_property_group.test", "org_id"),
				),
			},
			// Update (properties) testing
			{
				Config: `
resource "aria_property_group" "test" {
  name        = "ARIA_PROVIDER_TEST_PROPERTY_GROUP"
  description = "Temporary property group generated by Aria provider's acceptance tests."
  type        = "INPUT"

  properties = {
    some_text = {
      name               = "some_text"
      title              = "Some Text"
      description        = "Some text, more text."
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      one_of      = [
        { const = "a", title = "A", encrypted = false },
        { const = "c", title = "C", encrypted = false }
      ]
    }
    super_secret = {
      name               = "super_secret"
      title              = "Super Secret"
      description        = ""
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      min_length         = 32
    }
    yet_another = {
      name               = "yet_another"
      title              = "Yet Another"
      description        = ""
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
    }
    number = {
      name        = "number"
      title       = "Some Number"
      description = <<EOT
Some number.
It can be an integer or a float.
EOT
      type               = "number"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      default            = "3.141592"
      minimum            = 0
      maximum            = 5
    }
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_property_group.test", "id"),
					resource.TestCheckResourceAttr("aria_property_group.test", "name", "ARIA_PROVIDER_TEST_PROPERTY_GROUP"),
					resource.TestCheckResourceAttr("aria_property_group.test", "type", "INPUT"),
					resource.TestCheckResourceAttr("aria_property_group.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_property_group.test", "org_id"),
				),
			},
			// Update (scoping) testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_property_group" "test" {
  name        = "ARIA_PROVIDER_TEST_PROPERTY_GROUP"
  description = "Temporary property group generated by Aria provider's acceptance tests (scoped)."
  type        = "INPUT"
  project_id  = var.test_project_id

  properties = {
    some_text = {
      name               = "some_text"
      title              = "Some Text"
      description        = "Some text, more text."
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      one_of      = [
        { const = "a", title = "A", encrypted = false },
        { const = "b", title = "B", encrypted = false }
      ]
    }
    number = {
      name        = "number"
      title       = "Some Number"
      description = <<EOT
Some number.
It can be an integer or a float.
EOT
      type               = "number"
      default            = "3.141592"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      minimum            = 0
      maximum            = 5
    }
    super_secret = {
      name               = "super_secret"
      title              = "Super Secret"
      description        = ""
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      min_length         = 16
      max_length         = 64
    }
    other = {
      name               = "other"
      title              = "Other"
      description        = ""
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
    }
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_property_group.test", "id"),
					resource.TestCheckResourceAttr("aria_property_group.test", "name", "ARIA_PROVIDER_TEST_PROPERTY_GROUP"),
					resource.TestCheckResourceAttr("aria_property_group.test", "type", "INPUT"),
					resource.TestCheckResourceAttrSet("aria_property_group.test", "project_id"),
					resource.TestCheckResourceAttrSet("aria_property_group.test", "org_id"),
				),
			},
			// Update (properties) testing
			{
				Config: `
variable "test_project_id" {
  description = "Project where to generate test resources."
  type        = string
}

resource "aria_property_group" "test" {
  name        = "ARIA_PROVIDER_TEST_PROPERTY_GROUP_BIS"
  description = "Temporary property group generated by Aria provider's acceptance tests (scoped)."
  type        = "INPUT"
  project_id  = var.test_project_id

  properties = {
    some_text = {
      name               = "some_text"
      title              = "Some Text"
      description        = "Some text, more text."
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      one_of      = [
        { const = "a", title = "A", encrypted = false },
        { const = "b", title = "B", encrypted = false }
      ]
    }
    number = {
      name        = "number"
      title       = "Some Number"
      description = <<EOT
Some number.
It can be an integer or a float.
EOT
      type               = "number"
      default            = "3.141592"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      minimum            = 0
      maximum            = 5
    }
    super_secret = {
      name               = "super_secret"
      title              = "Super Secret"
      description        = ""
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
      min_length         = 16
      max_length         = 64
    }
    other = {
      name               = "other"
      title              = "Other"
      description        = ""
      type               = "string"
      encrypted          = false
      read_only          = false
      recreate_on_update = false
    }
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_property_group.test", "id"),
					resource.TestCheckResourceAttr("aria_property_group.test", "name", "ARIA_PROVIDER_TEST_PROPERTY_GROUP_BIS"),
					resource.TestCheckResourceAttr("aria_property_group.test", "type", "INPUT"),
					resource.TestCheckResourceAttrSet("aria_property_group.test", "project_id"),
					resource.TestCheckResourceAttrSet("aria_property_group.test", "org_id"),
				),
			},
			// ImportState testing
			{
				ResourceName:      "aria_property_group.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Delete testing automatically occurs in TestCase
			// TODO Check https://developer.hashicorp.com/terraform/plugin/sdkv2/testing/acceptance-tests/testcase#checkdestroy
		},
	})
}
