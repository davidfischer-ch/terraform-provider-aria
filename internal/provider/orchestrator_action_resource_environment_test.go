// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccOrchestratorActionCustomEnvironmentResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create an action using a custom environment
			{
				Config: `
resource "aria_orchestrator_environment" "test" {
	name                 = "TEST_ARIA_PROVIDER"
	description          = "Temporary environment generated by Aria provider's acceptance tests."
	version              = "0.4.2"
	runtime              = "python:3.10"
	runtime_memory_limit = 0
	runtime_timeout      = 0

	dependencies = {}
	repositories = {}
	variables    = {}
}

resource "aria_orchestrator_action" "test" {
  name                 = "actionZ"
  module               = "aria_provider_tests"
  fqn                  = "aria_provider_tests/actionZ"
  description          = "An action"
  version              = "1.0.0"
	environment_id       = aria_orchestrator_environment.test.id
  runtime_memory_limit = 0
  runtime_timeout      = 0
  script               = ""
  input_parameters     = []
  output_type          = "Any"
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(
						"aria_orchestrator_action.test", "id",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "name", "actionZ",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "module", "aria_provider_tests",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "fqn", "aria_provider_tests/actionZ",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "description", "An action",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "version", "1.0.0",
					),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_action.test", "environment_id",
						"aria_orchestrator_environment.test", "id",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "runtime", "",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "runtime_memory_limit", "0",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "runtime_timeout", "0",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "script", "",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "output_type", "Any",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_action.test", "validation_message", "",
					),
				),
			},
			// ImportState testing
			{
				ResourceName:      "aria_orchestrator_action.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Delete testing automatically occurs in TestCase
		},
	})
}
