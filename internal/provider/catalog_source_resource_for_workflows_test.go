// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccCatalogSourceForWorkflowsResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_workflow" "test" {
  name        = "Test Workflow for Catalog Source"
  description = "Workflow generated by the acceptance tests of Aria provider."
  category_id = aria_orchestrator_category.root.id
  version     = "0.1.0"

  position = { x = 100, y = 50 }

  restart_mode            = 1 # resume
  resume_from_failed_mode = 0 # default

  attrib        = jsonencode([])
  presentation  = jsonencode({})
  workflow_item = jsonencode([])

  input_parameters  = []
  output_parameters = []

  input_forms = jsonencode([
    {
      layout = {
        pages = []
      }
      schema = {}
    }
  ])
}

data "aria_integration" "workflows" {
  type_id = "com.vmw.vro.workflow"
}

# Publish the workflow we manage
resource "aria_catalog_source" "test" {
  name        = "ARIA_PROVIDER_TEST_CATALOG_SOURCE_FOR_WORKFLOWS"
  description = "Temporary catalog source generated by Aria provider's acceptance tests."
  type_id     = data.aria_integration.workflows.type_id

  config = {
    workflows = [
      {
        id          = aria_orchestrator_workflow.test.id
        name        = aria_orchestrator_workflow.test.name
        description = aria_orchestrator_workflow.test.description
        version     = aria_orchestrator_workflow.test.version
        integration = {
          name                        = data.aria_integration.workflows.name
          endpoint_configuration_link = data.aria_integration.workflows.endpoint_configuration_link
          endpoint_uri                = data.aria_integration.workflows.endpoint_uri
        }
      }
    ]
  }

  lifecycle {
    postcondition {
      condition     = self.config.workflows[0].id == aria_orchestrator_workflow.test.id
      error_message = "Oups workflow is missing or not the good one..."
    }
  }
}

# Use the workflow as a Day 2 action
resource "aria_resource_action" "test" {
  name          = "AriaProviderTestRA"
  display_name  = "Aria Provider Test Workflow Based RA"
  description   = "Resource action generated by the acceptance tests of Aria provider."
  provider_name = "vro-workflow"
  resource_type = "Deployment"
  status        = "RELEASED"
  project_id    = ""
  runnable_item = {
    id            = aria_orchestrator_workflow.test.id
    name          = aria_orchestrator_workflow.test.name
    project_id    = ""
    type          = "vro.workflow"
    endpoint_link = data.aria_integration.workflows.endpoint_configuration_link
    input_parameters = [
      {
        name        = "deployment"
        description = "TODO"
        type        = "string"
      }
    ]
    output_parameters = []
  }

  depends_on = [aria_catalog_source.test]
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					// Catalog Source
					resource.TestCheckResourceAttrSet("aria_catalog_source.test", "id"),
					resource.TestCheckResourceAttr(
						"aria_catalog_source.test", "name",
						"ARIA_PROVIDER_TEST_CATALOG_SOURCE_FOR_WORKFLOWS",
					),
					resource.TestCheckResourceAttr(
						"aria_catalog_source.test", "description",
						"Temporary catalog source generated by Aria provider's acceptance tests.",
					),
					resource.TestCheckResourceAttr(
						"aria_catalog_source.test", "type_id", "com.vmw.vro.workflow",
					),
					resource.TestCheckResourceAttr("aria_catalog_source.test", "global", "true"),
					resource.TestCheckResourceAttrSet("aria_catalog_source.test", "created_at"),
					resource.TestCheckResourceAttrSet("aria_catalog_source.test", "created_by"),
					resource.TestCheckResourceAttrSet("aria_catalog_source.test", "last_updated_at"),
					resource.TestCheckResourceAttrSet("aria_catalog_source.test", "last_updated_by"),
					resource.TestCheckResourceAttrSet("aria_catalog_source.test", "last_import_started_at"),
					resource.TestCheckResourceAttrSet("aria_catalog_source.test", "last_import_completed_at"),
					resource.TestCheckResourceAttr("aria_catalog_source.test", "last_import_errors.#", "0"),
					resource.TestCheckResourceAttr("aria_catalog_source.test", "items_found", "1"),
					resource.TestCheckResourceAttr("aria_catalog_source.test", "items_imported", "1"),
					resource.TestCheckResourceAttr("aria_catalog_source.test", "project_id", ""),
					resource.TestCheckResourceAttr("aria_catalog_source.test", "wait_imported", "true"),
					resource.TestCheckResourceAttr(
						"aria_catalog_source.test", "config.source_project_id", "",
					),

					// Resource Action - Core
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "id"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "name", "AriaProviderTestRA"),
					resource.TestCheckResourceAttr(
						"aria_resource_action.test", "display_name", "Aria Provider Test Workflow Based RA",
					),
					resource.TestCheckResourceAttr(
						"aria_resource_action.test", "description",
						"Resource action generated by the acceptance tests of Aria provider.",
					),
					resource.TestCheckResourceAttr("aria_resource_action.test", "provider_name", "vro-workflow"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "resource_type", "Deployment"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "status", "RELEASED"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "org_id"),

					// Resource Action - Form definition generated by the platform
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.id"),
					resource.TestCheckResourceAttr(
						"aria_resource_action.test", "form_definition.name", "AriaProviderTestRA",
					),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.type", "requestForm"),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.form"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.form_format", "JSON"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.styles", ""),
					resource.TestCheckResourceAttrPair(
						"aria_resource_action.test", "form_definition.source_id",
						"aria_resource_action.test", "id",
					),
					resource.TestCheckResourceAttr(
						"aria_resource_action.test", "form_definition.source_type", "resource.action",
					),
					resource.TestCheckResourceAttrSet("aria_resource_action.test", "form_definition.tenant"),
					resource.TestCheckResourceAttr("aria_resource_action.test", "form_definition.status", "ON"),
				),
			},

			// ImportState testing
			/* TODO https://github.com/davidfischer-ch/terraform-provider-aria/issues/111
			    {
			      ResourceName:      "aria_catalog_source.test",
			      ImportState:       true,
			      ImportStateVerify: true,
						// Prevent diff on force_delete field
						ImportStateVerifyIgnore: []string{"wait_imported"},
					},
			    }, */
			// Delete testing automatically occurs in TestCase
		},
	})
}
