// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccOrchestratorTaskResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_workflow" "test" {
  name        = "Test Workflow for Orchestrator Task"
  description = "Workflow generated by the acceptance tests of Aria provider."
  category_id = aria_orchestrator_category.root.id
  version     = "0.1.0"

  position = { x = 100, y = 50 }

  restart_mode            = 1 # resume
  resume_from_failed_mode = 0 # default

  attrib        = jsonencode([])
  presentation  = jsonencode({})
  workflow_item = jsonencode([])

  input_parameters  = []
  output_parameters = []

  input_forms = jsonencode([
    {
      layout = {
        pages = []
      }
      schema = {}
    }
  ])
}

# Schedule the workflow we manage
resource "aria_orchestrator_task" "test" {
  name        = "ARIA_PROVIDER_TEST_ORCHESTRATOR_TASK"
  description = "Task generated by the acceptance tests of Aria provider."

  recurrence_cycle      = "one-time"
  recurrence_pattern    = "(Europe/Zurich) "
  recurrence_start_date = "2085-01-06T05:02:00Z"
  start_mode            = "normal"
  state                 = "pending"

  # input_parameters = [] not yet implemented

  workflow = {
    id   = aria_orchestrator_workflow.test.id
    name = aria_orchestrator_workflow.test.name
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "id"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "name", "ARIA_PROVIDER_TEST_ORCHESTRATOR_TASK"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "description", "Task generated by the acceptance tests of Aria provider."),
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "href"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_cycle", "one-time"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_pattern", "(Europe/Zurich) "),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_start_date", "2085-01-06T05:02:00Z"),
					resource.TestCheckNoResourceAttr("aria_orchestrator_task.test", "recurrence_end_date"),
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "running_instance_id"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "start_mode", "normal"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "state", "pending"),
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "user"),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_task.test", "workflow.id",
						"aria_orchestrator_workflow.test", "id",
					),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_task.test", "workflow.name",
						"aria_orchestrator_workflow.test", "name",
					),
				),
			},

			// Update (name, ...) and Read testing
			{
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_workflow" "test" {
  name        = "Test Workflow for Orchestrator Task"
  description = "Workflow generated by the acceptance tests of Aria provider."
  category_id = aria_orchestrator_category.root.id
  version     = "0.1.0"

  position = { x = 100, y = 50 }

  restart_mode            = 1 # resume
  resume_from_failed_mode = 0 # default

  attrib        = jsonencode([])
  presentation  = jsonencode({})
  workflow_item = jsonencode([])

  input_parameters  = []
  output_parameters = []

  input_forms = jsonencode([
    {
      layout = {
        pages = []
      }
      schema = {}
    }
  ])
}

# Schedule the workflow we manage
resource "aria_orchestrator_task" "test" {
  name        = "ARIA_PROVIDER_TEST_ORCHESTRATOR_TASK_RENAMED"
  description = "Task generated by the acceptance tests of Aria provider (renamed)."

  recurrence_cycle      = "every-months"
  recurrence_pattern    = "(Europe/Zurich) 01 00:00:00,12 00:00:00,"
  recurrence_start_date = "2050-01-06T05:02:00Z"
  recurrence_end_date   = "2055-01-06T05:02:00Z"
  start_mode            = "normal"
  state                 = "suspended"

  # input_parameters = [] not yet implemented

  workflow = {
    id   = aria_orchestrator_workflow.test.id
    name = aria_orchestrator_workflow.test.name
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "id"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "name", "ARIA_PROVIDER_TEST_ORCHESTRATOR_TASK_RENAMED"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "description", "Task generated by the acceptance tests of Aria provider (renamed)."),
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "href"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_cycle", "every-months"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_pattern", "(Europe/Zurich) 01 00:00:00,12 00:00:00,"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_start_date", "2050-01-06T05:02:00Z"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_end_date", "2055-01-06T05:02:00Z"),
					// resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "running_instance_id"), sometimes its not
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "start_mode", "normal"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "state", "suspended"),
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "user"),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_task.test", "workflow.id",
						"aria_orchestrator_workflow.test", "id",
					),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_task.test", "workflow.name",
						"aria_orchestrator_workflow.test", "name",
					),
				),
			},

			// Recreate (workflow is immutable) and Read testing
			{
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_workflow" "another_test" {
  name        = "Another Test Workflow for Orchestrator Task"
  description = "Workflow generated by the acceptance tests of Aria provider."
  category_id = aria_orchestrator_category.root.id
  version     = "0.1.0"

  position = { x = 100, y = 50 }

  restart_mode            = 1 # resume
  resume_from_failed_mode = 0 # default

  attrib        = jsonencode([])
  presentation  = jsonencode({})
  workflow_item = jsonencode([])

  input_parameters  = []
  output_parameters = []

  input_forms = jsonencode([
    {
      layout = {
        pages = []
      }
      schema = {}
    }
  ])
}

# Schedule the workflow we manage
resource "aria_orchestrator_task" "test" {
  name        = "ARIA_PROVIDER_TEST_ORCHESTRATOR_TASK"
  description = "Task generated by the acceptance tests of Aria provider."

  recurrence_cycle      = "one-time"
  recurrence_pattern    = "(Europe/Zurich) "
  recurrence_start_date = "2085-01-06T05:02:00Z"
  start_mode            = "normal"
  state                 = "pending"

  # input_parameters = [] not yet implemented

  workflow = {
    id   = aria_orchestrator_workflow.another_test.id
    name = aria_orchestrator_workflow.another_test.name
  }
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "id"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "name", "ARIA_PROVIDER_TEST_ORCHESTRATOR_TASK"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "description", "Task generated by the acceptance tests of Aria provider."),
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "href"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_cycle", "one-time"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_pattern", "(Europe/Zurich) "),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "recurrence_start_date", "2085-01-06T05:02:00Z"),
					resource.TestCheckNoResourceAttr("aria_orchestrator_task.test", "recurrence_end_date"),
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "running_instance_id"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "start_mode", "normal"),
					resource.TestCheckResourceAttr("aria_orchestrator_task.test", "state", "pending"),
					resource.TestCheckResourceAttrSet("aria_orchestrator_task.test", "user"),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_task.test", "workflow.id",
						"aria_orchestrator_workflow.another_test", "id",
					),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_task.test", "workflow.name",
						"aria_orchestrator_workflow.another_test", "name",
					),
				),
			},

			// ImportState testing
			{
				ResourceName:      "aria_orchestrator_task.test",
				ImportState:       true,
				ImportStateVerify: true,
				// Prevent diff because of date format, even if the attribute is normalizing it...
				// map[string]string{
				// - "recurrence_start_date": "2085-01-06T05:02:00Z",
				// + "recurrence_start_date": "2085-01-06T05:02:00.000+00:00",
				// }
				ImportStateVerifyIgnore: []string{"recurrence_start_date"},
			},
			// Delete testing automatically occurs in TestCase
		},
	})
}
