// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccOrchestratorEnvironmentResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: `
resource "aria_orchestrator_environment" "test" {
	name                 = "TEST_ARIA_PROVIDER"
	description          = "Temporary environment generated by Aria provider's acceptance tests."
	version              = "0.4.2"
	runtime              = "python:3.10"
	runtime_memory_limit = 0
	runtime_timeout      = 0

	dependencies = {}
	repositories = {}
	variables    = {}
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(
						"aria_orchestrator_environment.test", "id",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "name", "TEST_ARIA_PROVIDER",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "description",
						"Temporary environment generated by Aria provider's acceptance tests.",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "version", "0.4.2",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "runtime", "python:3.10",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "runtime_memory_limit", "0",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "runtime_timeout", "0",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "dependencies.%", "0",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "repositories.%", "0",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "variables.%", "0",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "status", "UP_TO_DATE",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "validation_message", "",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "wait_up_to_date", "true",
					),
				),
			},
			// ImportState testing
			{
				ResourceName:      "aria_orchestrator_environment.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update and Read testing
			{
				Config: `
resource "aria_orchestrator_environment" "test" {
	name                 = "TEST_ARIA_PROVIDER_RENAMED"
	description          = "Temporary environment generated by Aria provider's acceptance tests 1."
	version              = "0.4.3"
	runtime              = "python:3.10"
	runtime_memory_limit = 128 * 1024 * 1024
	runtime_timeout      = 30

	dependencies = {
		requests = ">= 1.0"
		pyyaml   = ">= 0.5"
	}

	repositories = {}

	variables = {
		FOO  = "BAR"
		TOTO = "TATA"
	}

	lifecycle {
		postcondition {
			condition     = self.dependencies["requests"] == ">= 1.0"
			error_message = "Dependency requests KO, actual ${self.dependencies["requests"]}."
		}
		postcondition {
			condition     = self.variables["TOTO"] == "TATA"
			error_message = "Variable TOTO KO, actual ${self.variables["TOTO"]}."
		}
	}
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(
						"aria_orchestrator_environment.test", "id",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "name", "TEST_ARIA_PROVIDER_RENAMED",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "description",
						"Temporary environment generated by Aria provider's acceptance tests 1.",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "version", "0.4.3",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "runtime", "python:3.10",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "runtime_memory_limit", "134217728",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "runtime_timeout", "30",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "dependencies.%", "2",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "repositories.%", "0",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "variables.%", "2",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "status", "UP_TO_DATE",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "validation_message", "",
					),
					resource.TestCheckResourceAttr(
						"aria_orchestrator_environment.test", "wait_up_to_date", "true",
					),
				),
			},
			// Delete testing automatically occurs in TestCase
		},
	})
}
