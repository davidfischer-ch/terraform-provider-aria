// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccOrchestratorWorkflowResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_workflow" "test" {
  name        = "Test Workflow"
  description = "Workflow generated by the acceptance tests of Aria provider."
  category_id = aria_orchestrator_category.root.id
  version     = "0.0.0" # TODO test versioning

  position = { x = 100, y = 50 }

  restart_mode            = 1 # resume
  resume_from_failed_mode = 0 # default
}`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_orchestrator_workflow.test", "id"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "name", "Test Workflow"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "description", "Workflow generated by the acceptance tests of Aria provider."),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "version", "0.0.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "position.x", "100"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "position.y", "50"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "allowed_operations", "vef"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "object_name", "workflow:name=generic"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "restart_mode", "1"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "resume_from_failed_mode", "0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "root_name", "item0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "api_version", "6.0.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "editor_version", "2.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "force_delete", "false"),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_workflow.test", "category_id",
						"aria_orchestrator_category.root", "id",
					),
				),
			},
			// Update and Read testing
			{
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_workflow" "test" {
  name        = "Test Workflow Renamed"
  description = "Workflow generated by the acceptance tests of Aria provider (updated)."
  category_id = aria_orchestrator_category.root.id
  version     = "0.0.0" # TODO test versioning

  position = { x = 60, y = 10 }

  restart_mode            = 0 # skip
  resume_from_failed_mode = 2 # disabled

  force_delete = true
}`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_orchestrator_workflow.test", "id"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "name", "Test Workflow Renamed"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "description", "Workflow generated by the acceptance tests of Aria provider (updated)."),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "version", "0.0.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "position.x", "60"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "position.y", "10"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "allowed_operations", "vef"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "object_name", "workflow:name=generic"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "restart_mode", "0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "resume_from_failed_mode", "2"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "root_name", "item0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "api_version", "6.0.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "editor_version", "2.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "force_delete", "true"),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_workflow.test", "category_id",
						"aria_orchestrator_category.root", "id",
					),
				),
			},
			// Change category and Read testing
			{
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_category" "test" {
  name      = "Test"
  type      = "WorkflowCategory"
  parent_id = aria_orchestrator_category.root.id
}

resource "aria_orchestrator_workflow" "test" {
  name        = "Test Workflow Renamed"
  description = "Workflow generated by the acceptance tests of Aria provider (updated)."
  category_id = aria_orchestrator_category.test.id
  version     = "0.0.0" # TODO test versioning

  position = { x = 60, y = 10 }

  restart_mode            = 0 # skip
  resume_from_failed_mode = 2 # disabled

  force_delete = true
}`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_orchestrator_workflow.test", "id"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "name", "Test Workflow Renamed"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "description", "Workflow generated by the acceptance tests of Aria provider (updated)."),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "version", "0.0.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "position.x", "60"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "position.y", "10"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "allowed_operations", "vef"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "object_name", "workflow:name=generic"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "restart_mode", "0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "resume_from_failed_mode", "2"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "root_name", "item0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "api_version", "6.0.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "editor_version", "2.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "force_delete", "true"),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_workflow.test", "category_id",
						"aria_orchestrator_category.test", "id",
					),
				),
			},
			// ImportState testing
			/*{
				ResourceName:      "aria_orchestrator_action.test",
				ImportState:       true,
				ImportStateVerify: true,
			},*/
			// Delete testing automatically occurs in TestCase
		},
	})
}
