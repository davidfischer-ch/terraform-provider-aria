// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccOrchestratorWorkflowResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_workflow" "test" {
  name    = "Test Workflow"
  version = "1.0.0"

  category_id = aria_orchestrator_category.root.id

  restart_mode            = 1 # resume
  resume_from_failed_mode = 0 # default
}`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_orchestrator_workflow.test", "id"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "name", "Test Workflow"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "version", "1.0.0"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "restart_mode", "1"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "resume_from_failed_mode", "0"),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_workflow.test", "category_id",
						"aria_orchestrator_category.root", "id",
					),
				),
			},
			{
				// Change category testing
				Config: `
resource "aria_orchestrator_category" "root" {
  name      = "TEST_ARIA_PROVIDER"
  type      = "WorkflowCategory"
  parent_id = ""
}

resource "aria_orchestrator_category" "test" {
  name      = "Test"
  type      = "WorkflowCategory"
  parent_id = aria_orchestrator_category.root.id
}

resource "aria_orchestrator_workflow" "test" {
  name    = "Test Workflow"
  version = "1.0.0"

  category_id = aria_orchestrator_category.test.id

  restart_mode            = 1 # resume
  resume_from_failed_mode = 0 # default
}`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_orchestrator_workflow.test", "id"),
					resource.TestCheckResourceAttr("aria_orchestrator_workflow.test", "name", "Test Workflow"),
					resource.TestCheckResourceAttrPair(
						"aria_orchestrator_workflow.test", "category_id",
						"aria_orchestrator_category.test", "id",
					),
				),
			},
			/*			// Update and Read testing
						{
							Config: `
			locals {
				script = <<EOT
			print('Hello World')
			EOT
			}

			resource "aria_orchestrator_action" "test" {
			  name                 = "getVRAHost"
			  module               = "aria_provider_tests_bis"
			  fqn                  = "aria_provider_tests_bis/getVRAHost"
			  description          = "Temporary action generated by Aria provider's acceptance tests (bis)."
			  version              = "1.0.1"
			  runtime              = "python:3.10"
			  runtime_memory_limit = 10000000
			  runtime_timeout      = 5
			  script               = local.script
			  input_parameters     = []
			  output_type          = "string"

			  lifecycle {
			    postcondition {
			      condition     = self.script == local.script
			      error_message = "Script must be ${local.script}, actual ${self.script}"
			    }
			  }
			}`,
							Check: resource.ComposeAggregateTestCheckFunc(
								resource.TestCheckResourceAttrSet("aria_orchestrator_action.test", "id"),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "name", "getVRAHost"),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "module", "aria_provider_tests_bis"),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "fqn", "aria_provider_tests_bis/getVRAHost"),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "description", "Temporary action generated by Aria provider's acceptance tests (bis)."),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "version", "1.0.1"),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "runtime", "python:3.10"),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "runtime_memory_limit", "10000000"),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "runtime_timeout", "5"),
								resource.TestCheckResourceAttr("aria_orchestrator_action.test", "output_type", "string"),
							),
						},
						// ImportState testing
						{
							ResourceName:      "aria_orchestrator_action.test",
							ImportState:       true,
							ImportStateVerify: true,
						},*/
			// Delete testing automatically occurs in TestCase
		},
	})
}
