// Copyright (c) State of Geneva (Switzerland)
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccApprovalPolicyResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: `
variable "test_approver_name" {
  description = "Approvers in test approval policies."
  type        = string
}

resource "aria_policy" "test" {
  name             = "ARIA_PROVIDER_TEST_APPROVAL_POLICY"
  description      = "Temporary approval policy generated by Aria provider's acceptance tests."
  enforcement_type = "HARD"
  type_id          = "com.vmware.policy.approval"

  scope_criteria = jsonencode({
    matchExpression = [
      {
        or = [
          {
            or = [
              {
                key      = "project.name"
                operator = "contains"
                value    = "Never Match To Be Safe"
              }
            ]
          }
        ]
      }
    ]
  })

  definition = jsonencode({
    level                = 1
    actions              = ["Cloud.vSphere.Machine.Snapshot.Revert"]
    approvers            = [var.test_approver_name]
    approvalMode         = "ANY_OF"
    approverType         = "USER"
    autoApprovalExpiry   = 7
    autoApprovalDecision = "REJECT"
  })
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_policy.test", "id"),
					resource.TestCheckResourceAttr("aria_policy.test", "name", "ARIA_PROVIDER_TEST_APPROVAL_POLICY"),
					resource.TestCheckResourceAttr("aria_policy.test", "description", "Temporary approval policy generated by Aria provider's acceptance tests."),
					resource.TestCheckResourceAttr("aria_policy.test", "enforcement_type", "HARD"),
					resource.TestCheckResourceAttr("aria_policy.test", "type_id", "com.vmware.policy.approval"),
					resource.TestCheckNoResourceAttr("aria_policy.test", "criteria"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "scope_criteria"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "definition"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "created_at"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "created_by"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "last_updated_at"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "last_updated_by"),
					resource.TestCheckResourceAttr("aria_policy.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_policy.test", "org_id"),
				),
			},

			// Update (in place) and Read testing
			{
				Config: `
variable "test_approver_name" {
  description = "Approvers in test approval policies."
  type        = string
}

resource "aria_policy" "test" {
  name             = "ARIA_PROVIDER_TEST_APPROVAL_POLICY_RENAMED"
  description      = "Temporary approval policy generated by Aria provider's acceptance tests (renamed)."
  enforcement_type = "HARD"
  type_id          = "com.vmware.policy.approval"

  scope_criteria = jsonencode({
    matchExpression = [
      {
        or = [
          {
            or = [
              {
                key      = "project.name"
                operator = "contains"
                value    = "Never Match To Be Safe"
              }
            ]
          }
        ]
      }
    ]
  })

  definition = jsonencode({
    level                = 1
    actions              = ["Cloud.vSphere.Machine.Snapshot.Revert"]
    approvers            = [var.test_approver_name]
    approvalMode         = "ANY_OF"
    approverType         = "USER"
    autoApprovalExpiry   = 7
    autoApprovalDecision = "REJECT"
  })
}
`,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aria_policy.test", "id"),
					resource.TestCheckResourceAttr("aria_policy.test", "name", "ARIA_PROVIDER_TEST_APPROVAL_POLICY_RENAMED"),
					resource.TestCheckResourceAttr("aria_policy.test", "description", "Temporary approval policy generated by Aria provider's acceptance tests (renamed)."),
					resource.TestCheckResourceAttr("aria_policy.test", "enforcement_type", "HARD"),
					resource.TestCheckResourceAttr("aria_policy.test", "type_id", "com.vmware.policy.approval"),
					resource.TestCheckNoResourceAttr("aria_policy.test", "criteria"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "scope_criteria"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "definition"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "created_at"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "created_by"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "last_updated_at"),
					resource.TestCheckResourceAttrSet("aria_policy.test", "last_updated_by"),
					resource.TestCheckResourceAttr("aria_policy.test", "project_id", ""),
					resource.TestCheckResourceAttrSet("aria_policy.test", "org_id"),
				),
			},

			// ImportState testing
			{
				ResourceName:      "aria_policy.test",
				ImportState:       true,
				ImportStateVerify: true,

				// Prevent ImportStateVerify attributes not equivalent.
				// map[string]string{
				// -       "created_at":      "2025-01-28T12:38:11.836876611Z",
				// +       "created_at":      "2025-01-28T12:38:11.836877Z",
				// -       "last_updated_at": "2025-01-28T12:38:11.836876611Z",
				// +       "last_updated_at": "2025-01-28T12:38:11.836877Z",
				// }
				ImportStateVerifyIgnore: []string{"created_at", "last_updated_at"},
			},
			// Delete testing automatically occurs in TestCase
		},
	})
}
